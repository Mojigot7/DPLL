                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU
                       (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 28 octobre 2022, 23h59

Identité
--------
Nombre de binôme: 7
Nom, prénom 1: AHMED YAHIA Yacine
Nom, prénom 2: CORTIAL Jade


Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?

**à remplir**

---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ? 
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.

Non, on a crée une fonction auxiliaire dans simplifie qui prend les mêmes arguments avec un argument en plus qui représente une liste de liste. On regarde dans les clauses si c'est vide c'est qu'on a finit on revoie donc la liste de liste en argument.
Sinon on regarde clauses par clauses et si une clause contient l'élément en argument on n'ajoute pas la clause et on rappelle
l'algorithme. Sinon on regarde élément par élément de la clause si elle contient l'élément négatif en argument en ajoute la sous-liste
sans cet élément sinon on ajoute toute la clause sous forme de liste dans notre argument. On inverse la liste ensuite car les éléments
sont ajouté à l'envers car nous utilisons (::).

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.

Pour la fonction unitaire nous avons utilisé les fonctions auxiliaires qui existent déjà dans la bibliothèque List qui sont List.length et List.hd.
List.lenght dans la fonction unitaire nous sert à vérifier si la taille de la clause est égal à 1.
Lits.hd dans la fonction unitaire nous sert dans le coup où List.length de la clause est bien de 1 à renvoyer l'élément actuel qui est en tête de la liste.

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.

Pour la fonction pur nous avons utilisé plusieurs fonctions auxiliaires.
Celles qu'on a utilisé et qui existent déjà dans la bibliothèque List sont List.mem et List.flatten.

Nous utilisons List.mem dans notre programme de la manière suivante :
   Nous parcourons la liste et à chaque litteral de la liste nous regardons si dans l'entièreté de la list il n'y a pas le litteral en question sous sa négation. Si on trouve sa négation alors on passe au litteral suivant et on rappelle List.mem.

Nous avons également utiliser List.flatten dans notre programme de la manière suivante :
    A la fin de la fonction pur on appelle la fonction auxiliaire récursive que l'on a crée qui est aux2 qui va prendre en argument la liste de littéraux en y appliquant List.flatten.
    la fonction aux2 renvoie une liste et étant une fonction récursive on se retrouve avec plusieurs liste à la fin donc List.flatten va se charger de concaténer toute les listes en une seule qui sera le résultat final.

Nous avons également crée 2 fonctions auxiliaires qui sont aux2 (dont nous avons parlé plus haut) et nettoye.

Nous avons utilisé la fonction aux2 dans notre programme de la manière suivante :
   aux2 nous sert à isoler le litteral de la formule et de gérer l'exception de si la fonction est vide. Elle va renvoyer à chaque appel une liste donc le résultat final sera de plusieurs listes d'où l'utilité de List.flatten pour concaténer toute les listes pour renvoyer juste une liste (qui sera juste le litteral pur).

Nous avons utilisé la fonction nettoye dans notre programme de la manière suivante :
la fonction auxiliaire nettoye va servir a nettoyer la liste pour qu'il ne reste que le littera pur.
  Elle prend un litteral, une liste de clause et une liste VIDE.
  Si l'element actuel est egal au litteral ou a la negation du litteral on continue de parcourir en rappelant recursivement la fonction. Sinon on va rappeler la fonction mais en 3eme argument on mettra l'element actuel a vide et si la liste est vide on renvoie juste la liste vide.
  
---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.

Par exemple sur cette formule [[1;-1;-3];[-2;3];[-2]]:
solveur_split va appliquer le solveur littéral par littéral en commençant par 1 puis simplifie [[-2;3];[-2]] et ensuite applique sur -2 et trouve SAT 1 -2
solveur_dpll_rec va appliquer d'abord sur les clauses unitaires donc ici -2 puis simplifie [[1;-1;-3]] et ensuite applique sur unitaire ou pur ici -3 est pur. Donc on trouve SAT -2 3
solveur_dpll_rec sera plus rapide en général que solveur_split car il va chercher des littéraux seuls ou purs pour simplifier
alors solveur_split applique bêtement littéral par littéral.

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

**à remplir**

---

--fin du fichier RENDU--